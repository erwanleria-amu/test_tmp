{% extends 'base.html.twig' %}
{% block body %}
    <div id="wrapper">
        <div id="map"></div>
    </div>
    <table class="mdl-data-table mdl-js-data-table" width="100%">
        <thead>
        <tr>
            <th class="mdl-typography--text-center" width="50%">Ville</th>
            <th class="mdl-typography--text-center" width="50%">Météo</th>
        </tr>
        </thead>
        <tbody id="results">

        </tbody>
    </table>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>
        function decode(e){for(var t=[],a=0,n=e.length,s=0,r=0;a<n;){var o,i=0,l=0;do{l|=(31&(o=e.charAt(a++).charCodeAt(0)-63))<<i,i+=5}while(o>=32);s+=0!=(1&l)?~(l>>1):l>>1,i=0,l=0;do{l|=(31&(o=e.charAt(a++).charCodeAt(0)-63))<<i,i+=5}while(o>=32);r+=0!=(1&l)?~(l>>1):l>>1,t.push([s/1e5,r/1e5])}return t}
    </script>
    <script>
        coordinates = {
            lat: '43.2313',
            lng: '5.44100'
        };
        map = L.map('map').setView(coordinates, 12);
        L.tileLayer('http://toolserver.org/tiles/hikebike/{z}/{x}/{y}.png').addTo(map);
        L.Control.geocoder().addTo(map);

        let greenIcon = new L.Icon({
            iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        let redIcon = new L.Icon({
            iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        let locations = [];

        {% for waypoint in itinerary.waypoints %}
            coordinates = {
                lat: {{ waypoint.latitude }},
                lng: {{ waypoint.longitude }}
            };
            locations.push(coordinates);
            L.marker(coordinates{% if loop.first %}, {
                icon: greenIcon
            }{% endif %}{% if loop.last %}, {
                icon: redIcon
            }{% endif %}).addTo(map);
        {% endfor %}

        let encoded = "{{ itinerary.polyline }}";
        let polyline = new L.Polyline(decode(encoded));
        L.polyline(polyline.getLatLngs(), {color: 'red'}).addTo(map);
        map.fitBounds(polyline.getBounds());
    </script>
    <script>
        locations.forEach(function (element) {
            console.log("https://api.openweathermap.org/data/2.5/weather?lat=" + element.lat + "&lon=" + element.lng + "&units=metric" + "&APPID=" + OWeatherMapAPIKey);
            $.get("https://api.openweathermap.org/data/2.5/weather?lat=" + element.lat + "&lon=" + element.lng + "&units=metric" + "&APPID=" + OWeatherMapAPIKey, function (data) {
                let noRepeat = [];
                console.log(data);
                if(data != null) {
                    if ($.inArray(data.name, noRepeat) === -1 && !hasNumber(data.name)) {
                        noRepeat.push(data.name);
                        $('#results').append('<tr>' +
                            '<td>' + data.name + '</td>' +
                            '<td>' + data.weather[0].description + '(' + parseInt(data.main.temp) + '°C)<img src="https://openweathermap.org/img/w/' + data.weather[0].icon + '.png"></td></tr>');
                    }
                }
            });
        });

        function hasNumber(myString) {
            return /\d/.test(myString);
        }

    </script>
{% endblock %}
